type token =
  | INT of (int)
  | FLOAT of (float)
  | BOOL of (bool)
  | STRING of (string)
  | IDENT of (string)
  | OPCOM of ((int*int))
  | CLCOM of ((int*int))
  | SCLCOM of ((int*int))
  | DBLSEMI
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | DPLUS
  | DMINUS
  | DTIMES
  | DDIV
  | CARAT
  | EXP
  | LT
  | GEQ
  | LEQ
  | GT
  | EQUALS
  | AND
  | OR
  | PIPE
  | ARROW
  | DCOLON
  | LET
  | REC
  | SEMI
  | IN
  | IF
  | THEN
  | ELSE
  | FUN
  | LBRAC
  | RBRAC
  | LPAREN
  | RPAREN
  | COMMA
  | UNIT
  | ERROR
  | EOF
  | TRY
  | WITH
  | UNDERSCORE
  | RAISE
  | HEAD
  | TAIL
  | PRINT
  | NEG
  | FST
  | SND

open Parsing;;
# 3 "student.mly"
    open Mp8common
# 62 "student.ml"
let yytransl_const = [|
  265 (* DBLSEMI *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIV *);
  270 (* DPLUS *);
  271 (* DMINUS *);
  272 (* DTIMES *);
  273 (* DDIV *);
  274 (* CARAT *);
  275 (* EXP *);
  276 (* LT *);
  277 (* GEQ *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* EQUALS *);
  281 (* AND *);
  282 (* OR *);
  283 (* PIPE *);
  284 (* ARROW *);
  285 (* DCOLON *);
  286 (* LET *);
  287 (* REC *);
  288 (* SEMI *);
  289 (* IN *);
  290 (* IF *);
  291 (* THEN *);
  292 (* ELSE *);
  293 (* FUN *);
  294 (* LBRAC *);
  295 (* RBRAC *);
  296 (* LPAREN *);
  297 (* RPAREN *);
  298 (* COMMA *);
  299 (* UNIT *);
  300 (* ERROR *);
    0 (* EOF *);
  301 (* TRY *);
  302 (* WITH *);
  303 (* UNDERSCORE *);
  304 (* RAISE *);
  305 (* HEAD *);
  306 (* TAIL *);
  307 (* PRINT *);
  308 (* NEG *);
  309 (* FST *);
  310 (* SND *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* STRING *);
  261 (* IDENT *);
  262 (* OPCOM *);
  263 (* CLCOM *);
  264 (* SCLCOM *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\001\000\001\000\001\000\003\000\005\000\006\000\
\006\000\006\000\006\000\006\000\007\000\007\000\008\000\008\000\
\008\000\008\000\010\000\010\000\010\000\009\000\009\000\009\000\
\009\000\009\000\009\000\011\000\011\000\011\000\011\000\011\000\
\011\000\012\000\012\000\012\000\012\000\012\000\014\000\014\000\
\014\000\014\000\014\000\014\000\015\000\015\000\015\000\015\000\
\016\000\016\000\004\000\004\000\017\000\017\000\018\000\018\000\
\020\000\020\000\020\000\019\000\019\000\019\000\021\000\021\000\
\013\000\013\000\013\000\000\000"

let yylen = "\002\000\
\001\000\001\000\002\000\005\000\007\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\005\000\003\000\001\000\001\000\
\001\000\001\000\002\000\002\000\001\000\002\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\003\000\003\000\001\000\003\000\003\000\
\003\000\003\000\003\000\001\000\003\000\002\000\003\000\001\000\
\006\000\001\000\008\000\001\000\004\000\001\000\006\000\001\000\
\003\000\003\000\001\000\003\000\003\000\001\000\003\000\001\000\
\002\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\008\000\011\000\010\000\012\000\007\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\068\000\000\000\006\000\016\000\
\015\000\000\000\000\000\017\000\066\000\000\000\000\000\038\000\
\000\000\000\000\052\000\050\000\054\000\000\000\000\000\067\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\014\000\000\000\
\000\000\018\000\000\000\063\000\000\000\000\000\000\000\000\000\
\000\000\034\000\036\000\035\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\004\000\000\000\
\000\000\000\000\000\000\013\000\049\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000"

let yydgoto = "\002\000\
\021\000\000\000\044\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000"

let yysindex = "\005\000\
\121\006\000\000\000\000\000\000\000\000\000\000\000\000\002\255\
\175\006\023\255\215\005\175\006\000\000\175\006\175\006\175\006\
\175\006\175\006\175\006\175\006\000\000\093\004\000\000\000\000\
\000\000\001\255\011\255\000\000\000\000\052\255\089\255\000\000\
\009\255\227\003\000\000\000\000\000\000\014\255\020\255\000\000\
\018\255\042\255\005\255\013\006\250\254\028\255\000\000\254\254\
\039\004\000\000\013\006\013\006\013\006\013\006\013\006\013\006\
\000\000\175\006\013\006\000\000\021\255\175\006\175\006\175\006\
\175\006\175\006\175\006\175\006\175\006\175\006\175\006\175\006\
\175\006\175\006\175\006\175\006\175\006\175\006\175\006\175\006\
\044\255\033\255\054\255\175\006\175\006\000\000\000\000\175\006\
\089\255\000\000\011\255\000\000\089\255\089\255\089\255\089\255\
\227\003\000\000\000\000\000\000\000\000\009\255\227\003\227\003\
\227\003\227\003\227\003\013\006\009\255\013\006\147\004\027\255\
\041\255\175\006\063\255\201\004\000\000\255\004\000\000\175\006\
\175\006\045\255\175\006\000\000\000\000\053\005\047\255\175\006\
\013\006\000\000\175\006\013\006"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\225\006\131\255\000\000\000\000\065\002\253\000\000\000\
\185\255\119\002\000\000\000\000\000\000\239\255\199\000\000\000\
\000\000\000\000\000\000\000\000\067\006\000\000\000\000\241\003\
\000\000\000\000\015\007\049\007\083\007\117\007\151\007\185\007\
\000\000\000\000\219\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\001\000\000\037\000\000\000\105\001\159\001\213\001\011\002\
\173\002\000\000\000\000\000\000\000\000\091\000\227\002\025\003\
\079\003\133\003\187\003\253\007\145\000\031\008\000\000\107\005\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\161\005\000\000\
\065\008\000\000\000\000\099\008"

let yygindex = "\000\000\
\000\000\000\000\255\255\000\000\000\000\051\000\023\000\024\000\
\000\000\072\000\083\000\035\000\044\000\216\255\016\000\167\255\
\177\255\010\000\087\000\000\000\042\000"

let yytablesize = 2445
let yytable = "\022\000\
\112\000\003\000\004\000\005\000\006\000\001\000\041\000\062\000\
\063\000\082\000\049\000\064\000\065\000\051\000\052\000\053\000\
\054\000\055\000\056\000\077\000\059\000\003\000\004\000\005\000\
\006\000\007\000\066\000\046\000\084\000\061\000\102\000\127\000\
\042\000\071\000\112\000\083\000\086\000\109\000\127\000\077\000\
\125\000\080\000\059\000\013\000\078\000\079\000\081\000\059\000\
\113\000\059\000\059\000\059\000\059\000\059\000\059\000\085\000\
\114\000\059\000\115\000\120\000\012\000\062\000\063\000\013\000\
\121\000\064\000\065\000\122\000\128\000\015\000\016\000\017\000\
\018\000\019\000\020\000\108\000\060\000\110\000\111\000\131\000\
\066\000\097\000\116\000\090\000\091\000\050\000\118\000\103\000\
\104\000\105\000\106\000\107\000\089\000\048\000\117\000\045\000\
\093\000\094\000\095\000\096\000\067\000\068\000\092\000\000\000\
\069\000\070\000\059\000\000\000\059\000\059\000\098\000\099\000\
\100\000\101\000\059\000\000\000\059\000\000\000\000\000\126\000\
\000\000\129\000\000\000\000\000\059\000\000\000\000\000\059\000\
\000\000\132\000\059\000\021\000\021\000\021\000\021\000\021\000\
\000\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\000\000\021\000\
\021\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\000\000\000\000\
\000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\059\000\059\000\059\000\059\000\059\000\000\000\000\000\
\000\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\000\000\059\000\000\000\000\000\059\000\059\000\000\000\
\000\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\000\000\000\000\000\000\000\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\056\000\
\056\000\056\000\056\000\056\000\000\000\000\000\000\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\000\000\056\000\056\000\000\000\000\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\000\000\000\000\000\000\000\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\064\000\064\000\064\000\
\064\000\064\000\000\000\000\000\000\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\000\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\000\000\
\000\000\064\000\064\000\000\000\000\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\000\000\000\000\000\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\058\000\058\000\058\000\058\000\058\000\
\000\000\000\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\000\000\058\000\000\000\000\000\058\000\
\058\000\000\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\000\000\000\000\
\000\000\000\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\057\000\057\000\057\000\057\000\057\000\000\000\000\000\
\000\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\000\000\057\000\000\000\000\000\057\000\057\000\000\000\
\000\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\000\000\000\000\000\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\062\000\
\062\000\062\000\062\000\062\000\000\000\000\000\000\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\000\000\
\000\000\000\000\000\000\062\000\062\000\000\000\000\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\000\000\000\000\000\000\000\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\033\000\033\000\033\000\
\033\000\033\000\000\000\000\000\000\000\033\000\033\000\033\000\
\000\000\000\000\033\000\033\000\000\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
\000\000\033\000\033\000\000\000\000\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\000\000\000\000\000\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\032\000\032\000\032\000\032\000\032\000\
\000\000\000\000\000\000\032\000\032\000\032\000\000\000\000\000\
\032\000\032\000\000\000\000\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\000\000\000\000\032\000\
\032\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\028\000\028\000\028\000\028\000\028\000\000\000\000\000\
\000\000\028\000\028\000\028\000\000\000\000\000\028\000\028\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\000\000\000\000\028\000\028\000\000\000\
\000\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\000\000\000\000\000\000\000\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\030\000\
\030\000\030\000\030\000\030\000\000\000\000\000\000\000\030\000\
\030\000\030\000\000\000\000\000\030\000\030\000\000\000\000\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\000\000\000\000\030\000\030\000\000\000\000\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\000\000\000\000\000\000\000\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\029\000\029\000\029\000\
\029\000\029\000\000\000\000\000\000\000\029\000\029\000\029\000\
\000\000\000\000\029\000\029\000\000\000\000\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\000\000\029\000\029\000\000\000\000\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\000\000\000\000\000\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\031\000\031\000\031\000\031\000\031\000\
\000\000\000\000\000\000\031\000\031\000\031\000\000\000\000\000\
\031\000\031\000\000\000\000\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\000\000\000\000\031\000\
\031\000\000\000\000\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\000\000\000\000\
\000\000\000\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
\000\000\048\000\000\000\000\000\048\000\048\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\000\000\000\000\048\000\000\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\044\000\
\044\000\044\000\044\000\044\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\000\000\000\000\044\000\
\044\000\000\000\000\000\044\000\044\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\044\000\045\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\000\000\
\000\000\045\000\044\000\000\000\000\000\045\000\044\000\045\000\
\045\000\044\000\044\000\045\000\044\000\045\000\045\000\044\000\
\000\000\000\000\000\000\000\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\040\000\040\000\040\000\040\000\040\000\
\000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\000\000\000\000\000\000\040\000\040\000\000\000\000\000\040\000\
\040\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\042\000\042\000\042\000\042\000\042\000\000\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\000\000\000\000\000\000\
\000\000\042\000\042\000\000\000\000\000\042\000\042\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\000\000\000\000\000\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\043\000\
\043\000\043\000\043\000\043\000\000\000\000\000\000\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\000\000\000\000\000\000\000\000\000\000\043\000\
\043\000\000\000\000\000\043\000\043\000\000\000\000\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\000\000\000\000\000\000\000\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\039\000\039\000\039\000\
\039\000\039\000\000\000\000\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\000\000\000\000\000\000\000\000\039\000\039\000\000\000\
\000\000\039\000\039\000\000\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\000\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\041\000\041\000\041\000\041\000\041\000\
\000\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
\000\000\000\000\000\000\041\000\041\000\000\000\000\000\041\000\
\041\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\048\000\048\000\048\000\048\000\048\000\072\000\073\000\
\074\000\075\000\076\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\000\000\000\000\048\000\000\000\
\000\000\000\000\048\000\000\000\000\000\048\000\048\000\000\000\
\048\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\003\000\
\004\000\005\000\006\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\009\000\000\000\000\000\010\000\011\000\000\000\012\000\087\000\
\088\000\013\000\000\000\000\000\000\000\000\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\003\000\004\000\005\000\
\006\000\007\000\000\000\000\000\000\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\009\000\000\000\
\000\000\010\000\011\000\000\000\012\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\003\000\004\000\005\000\006\000\007\000\
\000\000\000\000\000\000\119\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\000\000\000\000\000\000\009\000\000\000\000\000\010\000\
\011\000\000\000\012\000\000\000\000\000\013\000\000\000\000\000\
\000\000\000\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\003\000\004\000\005\000\006\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\000\000\000\000\009\000\000\000\123\000\010\000\011\000\000\000\
\012\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\003\000\
\004\000\005\000\006\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\009\000\000\000\000\000\010\000\011\000\000\000\012\000\124\000\
\000\000\013\000\000\000\000\000\000\000\000\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\003\000\004\000\005\000\
\006\000\007\000\000\000\000\000\000\000\130\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\009\000\000\000\
\000\000\010\000\011\000\000\000\012\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\050\000\050\000\050\000\050\000\050\000\
\000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\000\000\000\000\050\000\000\000\000\000\050\000\
\050\000\000\000\050\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\052\000\052\000\052\000\052\000\052\000\000\000\000\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\052\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\000\000\000\000\052\000\000\000\000\000\052\000\052\000\000\000\
\052\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\003\000\
\004\000\005\000\006\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\009\000\000\000\000\000\010\000\011\000\047\000\012\000\000\000\
\000\000\013\000\000\000\000\000\000\000\000\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\003\000\004\000\005\000\
\006\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\009\000\000\000\
\000\000\010\000\011\000\000\000\012\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\000\000\000\000\000\000\056\000\000\000\000\000\056\000\
\056\000\000\000\056\000\000\000\000\000\056\000\000\000\000\000\
\000\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\003\000\004\000\005\000\006\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\000\000\009\000\000\000\000\000\010\000\011\000\000\000\
\012\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\003\000\
\004\000\005\000\006\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\009\000\000\000\000\000\010\000\011\000\000\000\012\000\000\000\
\000\000\013\000\000\000\000\000\000\000\000\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\018\000\000\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\000\000\000\000\018\000\018\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\000\000\000\000\022\000\000\000\000\000\000\000\022\000\
\000\000\022\000\022\000\000\000\000\000\022\000\000\000\022\000\
\022\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\000\000\023\000\000\000\000\000\
\000\000\023\000\000\000\023\000\023\000\000\000\000\000\023\000\
\000\000\023\000\023\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\000\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\000\000\000\000\024\000\
\000\000\000\000\000\000\024\000\000\000\024\000\024\000\000\000\
\000\000\024\000\000\000\024\000\024\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\000\000\
\000\000\025\000\000\000\000\000\000\000\025\000\000\000\025\000\
\025\000\000\000\000\000\025\000\000\000\025\000\025\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\000\000\000\000\026\000\000\000\000\000\000\000\026\000\
\000\000\026\000\026\000\000\000\000\000\026\000\000\000\026\000\
\026\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\000\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\000\000\027\000\000\000\000\000\
\000\000\027\000\000\000\027\000\027\000\000\000\000\000\027\000\
\000\000\027\000\027\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\000\000\000\000\019\000\
\000\000\000\000\000\000\019\000\000\000\019\000\019\000\000\000\
\000\000\019\000\000\000\019\000\019\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\000\000\
\000\000\060\000\000\000\000\000\000\000\060\000\000\000\060\000\
\060\000\000\000\000\000\060\000\000\000\060\000\060\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\000\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\000\000\000\000\061\000\000\000\000\000\000\000\061\000\
\000\000\061\000\061\000\000\000\000\000\061\000\000\000\061\000\
\061\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\000\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\000\000\000\000\055\000\000\000\000\000\
\000\000\055\000\000\000\055\000\055\000\000\000\000\000\055\000\
\000\000\055\000\055\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\000\000\000\000\051\000\
\000\000\000\000\000\000\051\000\000\000\051\000\051\000\000\000\
\000\000\051\000\000\000\051\000\051\000"

let yycheck = "\001\000\
\080\000\001\001\002\001\003\001\004\001\001\000\005\001\010\001\
\011\001\005\001\012\000\014\001\015\001\015\000\016\000\017\000\
\018\000\019\000\020\000\026\001\022\000\001\001\002\001\003\001\
\004\001\005\001\029\001\005\001\035\001\019\001\071\000\121\000\
\031\001\025\001\114\000\031\001\039\001\078\000\128\000\026\001\
\120\000\024\001\044\000\043\001\025\001\026\001\005\001\049\000\
\005\001\051\000\052\000\053\000\054\000\055\000\056\000\028\001\
\024\001\059\000\005\001\033\001\040\001\010\001\011\001\043\001\
\024\001\014\001\015\001\005\001\024\001\049\001\050\001\051\001\
\052\001\053\001\054\001\077\000\026\000\079\000\080\000\033\001\
\029\001\066\000\084\000\061\000\061\000\014\000\088\000\072\000\
\073\000\074\000\075\000\076\000\058\000\011\000\085\000\009\000\
\062\000\063\000\064\000\065\000\012\001\013\001\061\000\255\255\
\016\001\017\001\108\000\255\255\110\000\111\000\067\000\068\000\
\069\000\070\000\116\000\255\255\118\000\255\255\255\255\121\000\
\255\255\123\000\255\255\255\255\126\000\255\255\255\255\129\000\
\255\255\131\000\132\000\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\026\001\255\255\255\255\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\255\255\255\255\014\001\015\001\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\029\001\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\255\255\255\255\012\001\013\001\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\255\255\255\255\029\001\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\255\255\
\255\255\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\255\255\255\255\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\255\255\255\255\029\001\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\255\255\
\255\255\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\255\255\255\255\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\255\255\255\255\037\001\038\001\255\255\
\040\001\255\255\255\255\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\034\001\255\255\255\255\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\034\001\255\255\
\255\255\037\001\038\001\255\255\040\001\255\255\255\255\043\001\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\034\001\255\255\255\255\037\001\
\038\001\255\255\040\001\255\255\255\255\043\001\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\255\255\036\001\037\001\038\001\255\255\
\040\001\255\255\255\255\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\034\001\255\255\255\255\037\001\038\001\255\255\040\001\041\001\
\255\255\043\001\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\034\001\255\255\
\255\255\037\001\038\001\255\255\040\001\255\255\255\255\043\001\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\034\001\255\255\255\255\037\001\
\038\001\255\255\040\001\255\255\255\255\043\001\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\255\255\255\255\037\001\038\001\255\255\
\040\001\255\255\255\255\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\034\001\255\255\255\255\037\001\038\001\039\001\040\001\255\255\
\255\255\043\001\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\034\001\255\255\
\255\255\037\001\038\001\255\255\040\001\255\255\255\255\043\001\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\034\001\255\255\255\255\037\001\
\038\001\255\255\040\001\255\255\255\255\043\001\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\255\255\255\255\037\001\038\001\255\255\
\040\001\255\255\255\255\043\001\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\034\001\255\255\255\255\037\001\038\001\255\255\040\001\255\255\
\255\255\043\001\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\005\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\036\001\255\255\255\255\039\001\255\255\041\001\
\042\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\036\001\255\255\255\255\039\001\
\255\255\041\001\042\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\035\001\036\001\255\255\
\255\255\039\001\255\255\041\001\042\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\035\001\
\036\001\255\255\255\255\039\001\255\255\041\001\042\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\036\001\255\255\255\255\039\001\255\255\041\001\
\042\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\036\001\255\255\255\255\039\001\
\255\255\041\001\042\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\035\001\036\001\255\255\
\255\255\039\001\255\255\041\001\042\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\035\001\
\036\001\255\255\255\255\039\001\255\255\041\001\042\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\036\001\255\255\255\255\039\001\255\255\041\001\
\042\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\036\001\255\255\255\255\039\001\
\255\255\041\001\042\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\035\001\036\001\255\255\
\255\255\039\001\255\255\041\001\042\001"

let yynames_const = "\
  DBLSEMI\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  DPLUS\000\
  DMINUS\000\
  DTIMES\000\
  DDIV\000\
  CARAT\000\
  EXP\000\
  LT\000\
  GEQ\000\
  LEQ\000\
  GT\000\
  EQUALS\000\
  AND\000\
  OR\000\
  PIPE\000\
  ARROW\000\
  DCOLON\000\
  LET\000\
  REC\000\
  SEMI\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUN\000\
  LBRAC\000\
  RBRAC\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  UNIT\000\
  ERROR\000\
  EOF\000\
  TRY\000\
  WITH\000\
  UNDERSCORE\000\
  RAISE\000\
  HEAD\000\
  TAIL\000\
  PRINT\000\
  NEG\000\
  FST\000\
  SND\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  IDENT\000\
  OPCOM\000\
  CLCOM\000\
  SCLCOM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 26 "student.mly"
               ( None )
# 897 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 27 "student.mly"
         ( Some _1 )
# 904 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 31 "student.mly"
                               ( (Anon _1) )
# 911 "student.ml"
               : Mp8common.toplvl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 32 "student.mly"
                                         ( TopLet (_2,_4) )
# 919 "student.ml"
               : Mp8common.toplvl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 33 "student.mly"
                                                    ( (TopRec (_3, _4, _6)) )
# 928 "student.ml"
               : Mp8common.toplvl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rec_expression) in
    Obj.repr(
# 36 "student.mly"
                   ( _1 )
# 935 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 39 "student.mly"
            ( VarExp _1 )
# 942 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 42 "student.mly"
                    ( ConExp (Int _1) )
# 949 "student.ml"
               : 'const_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "student.mly"
                    ( ConExp (Unit) )
# 955 "student.ml"
               : 'const_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 44 "student.mly"
                    ( ConExp (Bool _1) )
# 962 "student.ml"
               : 'const_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 45 "student.mly"
                    ( ConExp (Float _1) )
# 969 "student.ml"
               : 'const_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 46 "student.mly"
                    ( ConExp (String _1) )
# 976 "student.ml"
               : 'const_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 49 "student.mly"
                                              ( BinExp (Comma, _2, _4) )
# 984 "student.ml"
               : 'paren_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 50 "student.mly"
                             ( _2 )
# 991 "student.ml"
               : 'paren_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const_expression) in
    Obj.repr(
# 53 "student.mly"
                     ( _1 )
# 998 "student.ml"
               : 'noprec_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 54 "student.mly"
                      ( _1 )
# 1005 "student.ml"
               : 'noprec_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'monop_expression) in
    Obj.repr(
# 55 "student.mly"
                     ( _1 )
# 1012 "student.ml"
               : 'noprec_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expression) in
    Obj.repr(
# 56 "student.mly"
                     ( _1 )
# 1019 "student.ml"
               : 'noprec_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 59 "student.mly"
                          ( AppExp(_1, _2) )
# 1027 "student.ml"
               : 'app_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'paren_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'const_expression) in
    Obj.repr(
# 60 "student.mly"
                                      ( AppExp(_1, _2) )
# 1035 "student.ml"
               : 'app_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noprec_exp) in
    Obj.repr(
# 61 "student.mly"
               ( _1 )
# 1042 "student.ml"
               : 'app_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 64 "student.mly"
                    ( MonExp (Head, _2)  )
# 1049 "student.ml"
               : 'monop_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 65 "student.mly"
                    ( MonExp (Tail, _2) )
# 1056 "student.ml"
               : 'monop_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 66 "student.mly"
                      ( MonExp (Print, _2) )
# 1063 "student.ml"
               : 'monop_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 67 "student.mly"
                    ( MonExp (Neg, _2) )
# 1070 "student.ml"
               : 'monop_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 68 "student.mly"
                   ( MonExp (Fst, _2) )
# 1077 "student.ml"
               : 'monop_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 69 "student.mly"
                   ( MonExp (Snd, _2) )
# 1084 "student.ml"
               : 'monop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'muldiv_exp) in
    Obj.repr(
# 72 "student.mly"
                                     ( BinExp (Add, _1, _3) )
# 1092 "student.ml"
               : 'infix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'muldiv_exp) in
    Obj.repr(
# 73 "student.mly"
                                      ( BinExp (FAdd, _1, _3) )
# 1100 "student.ml"
               : 'infix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'muldiv_exp) in
    Obj.repr(
# 74 "student.mly"
                                      ( BinExp (Sub, _1, _3) )
# 1108 "student.ml"
               : 'infix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'muldiv_exp) in
    Obj.repr(
# 75 "student.mly"
                                       ( BinExp (FSub, _1, _3) )
# 1116 "student.ml"
               : 'infix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'muldiv_exp) in
    Obj.repr(
# 76 "student.mly"
                                ( BinExp (Concat, _1, _3) )
# 1124 "student.ml"
               : 'infix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'muldiv_exp) in
    Obj.repr(
# 77 "student.mly"
               ( _1 )
# 1131 "student.ml"
               : 'infix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'muldiv_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'raise_expression) in
    Obj.repr(
# 80 "student.mly"
                                      ( BinExp (Mul, _1, _3) )
# 1139 "student.ml"
               : 'muldiv_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'muldiv_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'raise_expression) in
    Obj.repr(
# 81 "student.mly"
                                       ( BinExp (FMul, _1, _3) )
# 1147 "student.ml"
               : 'muldiv_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'muldiv_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'raise_expression) in
    Obj.repr(
# 82 "student.mly"
                                    ( BinExp (Div, _1, _3) )
# 1155 "student.ml"
               : 'muldiv_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'muldiv_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'raise_expression) in
    Obj.repr(
# 83 "student.mly"
                                     ( BinExp (Div, _1, _3) )
# 1163 "student.ml"
               : 'muldiv_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'raise_expression) in
    Obj.repr(
# 84 "student.mly"
                     ( _1 )
# 1170 "student.ml"
               : 'muldiv_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cons_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_expression) in
    Obj.repr(
# 87 "student.mly"
                                       ( BinExp (Less, _3, _1) )
# 1178 "student.ml"
               : 'bool_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cons_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_expression) in
    Obj.repr(
# 88 "student.mly"
                                       ( BinExp (Less, _1, _3) )
# 1186 "student.ml"
               : 'bool_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cons_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_expression) in
    Obj.repr(
# 89 "student.mly"
                                           ( BinExp (Eq, _1, _3) )
# 1194 "student.ml"
               : 'bool_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cons_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_expression) in
    Obj.repr(
# 90 "student.mly"
                                        ( IfExp (BinExp(Less, _3, _1), ConExp(Bool true), BinExp(Eq, _1, _3)) )
# 1202 "student.ml"
               : 'bool_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cons_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_expression) in
    Obj.repr(
# 91 "student.mly"
                                        ( IfExp (BinExp(Less, _1, _3), ConExp(Bool true), BinExp(Eq, _1, _3)) )
# 1210 "student.ml"
               : 'bool_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cons_expression) in
    Obj.repr(
# 92 "student.mly"
                    ( _1 )
# 1217 "student.ml"
               : 'bool_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'infix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_expression) in
    Obj.repr(
# 95 "student.mly"
                                            ( BinExp(Cons, _1, _3) )
# 1225 "student.ml"
               : 'cons_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "student.mly"
                ( ConExp (Nil) )
# 1231 "student.ml"
               : 'cons_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'infix_expression) in
    Obj.repr(
# 97 "student.mly"
                                 ( BinExp(Cons, _2, ConExp(Nil)) )
# 1238 "student.ml"
               : 'cons_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infix_expression) in
    Obj.repr(
# 98 "student.mly"
                     ( _1 )
# 1245 "student.ml"
               : 'cons_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'fun_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fun_expression) in
    Obj.repr(
# 101 "student.mly"
                                                      ( LetExp(_2, _4, _6) )
# 1254 "student.ml"
               : 'let_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fun_expression) in
    Obj.repr(
# 102 "student.mly"
                   ( _1 )
# 1261 "student.ml"
               : 'let_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'let_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 105 "student.mly"
                                                            ( RecExp(_3, _4, _6, _8) )
# 1271 "student.ml"
               : 'rec_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_expression) in
    Obj.repr(
# 106 "student.mly"
                   ( _1 )
# 1278 "student.ml"
               : 'rec_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'if_expression) in
    Obj.repr(
# 109 "student.mly"
                                  ( FunExp(_2, _4) )
# 1286 "student.ml"
               : 'fun_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_expression) in
    Obj.repr(
# 110 "student.mly"
                  ( _1 )
# 1293 "student.ml"
               : 'fun_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'or_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 113 "student.mly"
                                                     ( IfExp(_2, _4, _6) )
# 1302 "student.ml"
               : 'if_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expression) in
    Obj.repr(
# 114 "student.mly"
                  ( _1 )
# 1309 "student.ml"
               : 'if_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bool_expression) in
    Obj.repr(
# 117 "student.mly"
                                       ( IfExp(_1, _3, ConExp(Bool false)) )
# 1317 "student.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bool_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bool_expression) in
    Obj.repr(
# 118 "student.mly"
                                        ( IfExp(_1, _3, ConExp(Bool false)) )
# 1325 "student.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bool_expression) in
    Obj.repr(
# 119 "student.mly"
                    ( _1 )
# 1332 "student.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 122 "student.mly"
                                ( IfExp(_1, ConExp(Bool true), _3) )
# 1340 "student.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 123 "student.mly"
                                 ( IfExp(_1, ConExp(Bool true), _3) )
# 1348 "student.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 124 "student.mly"
                   ( _1 )
# 1355 "student.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'noprec_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_expression) in
    Obj.repr(
# 127 "student.mly"
                                  ( BinExp(Exp, _1, _3) )
# 1363 "student.ml"
               : 'exp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noprec_exp) in
    Obj.repr(
# 128 "student.mly"
               ( _1 )
# 1370 "student.ml"
               : 'exp_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'app_expression) in
    Obj.repr(
# 131 "student.mly"
                         ( RaiseExp(_2) )
# 1377 "student.ml"
               : 'raise_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_expression) in
    Obj.repr(
# 132 "student.mly"
                   ( _1 )
# 1384 "student.ml"
               : 'raise_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp_expression) in
    Obj.repr(
# 133 "student.mly"
                   ( _1 )
# 1391 "student.ml"
               : 'raise_expression))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Mp8common.toplvl)
